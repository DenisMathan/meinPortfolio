{"ast":null,"code":"/*\nhttps://pages.mtu.edu/~suits/notefreqs.html\n*/\n// 1 = loud\nvar VOLUME = 0.3;\nvar i = 0; // work around typescript warnings\n\nconst wnd = window;\nexport const Notes = {\n  C: 261.63,\n  Cs: 277.18,\n  D: 293.66,\n  Ds: 311.13,\n  E: 329.63,\n  F: 349.23,\n  Fs: 369.99,\n  G: 392,\n  Gs: 415.30,\n  A: 440,\n  As: 466.16,\n  B: 493.88,\n  C2: 261.63 * 2\n};\n\nclass Synthesizer {\n  constructor() {\n    this.audioCtx = new (wnd['AudioContext'] || wnd['webkitAudioContext'])();\n    this.gainNode = void 0;\n    this.gainNode = this.audioCtx.createGain(); // connect to audio context\n\n    this.gainNode.connect(this.audioCtx.destination); // lower volume\n    //this.gainNode.gain.value = VOLUME;\n\n    this.gainNode.gain.setValueAtTime(0, this.audioCtx.currentTime + 0.01);\n    this.gainNode.gain.exponentialRampToValueAtTime(0.1, this.audioCtx.currentTime + 0.5);\n  }\n\n  getGainNode() {\n    return this.gainNode.gain.value;\n  }\n\n  switchType(toneType) {\n    if (i = 0) {\n      i++;\n      return 'sine';\n    } else {\n      return toneType;\n    }\n  }\n\n  volumePlus() {\n    /*if(this.gainNode.gain.value<0.70){\n    this.gainNode.gain.value = this.gainNode.gain.value + 0.01;}\n    else{\n      alert(\"max erreicht\");\n      this.gainNode.gain.value = 0.70;\n    }\n    console.log(this.gainNode.gain.value);*/\n  }\n\n  volumeMinus() {\n    /*if(this.gainNode.gain.value>0.01){\n    this.gainNode.gain.value = this.gainNode.gain.value - 0.01;}\n    else{\n      this.gainNode.gain.value=0;\n    }\n    console.log(this.gainNode.gain.value);*/\n  }\n\n  play(note, type) {\n    const oscillator = this.audioCtx.createOscillator();\n    oscillator.connect(this.gainNode); // default\n\n    oscillator.type = type;\n    oscillator.frequency.value = note;\n    oscillator.start(this.audioCtx.currentTime);\n    oscillator.frequency.setValueAtTime(0.3, this.audioCtx.currentTime); //oscillator.frequency.exponentialRampToValueAtTime(0.01,this.audioCtx.currentTime + 0.5 );\n\n    oscillator.stop(this.audioCtx.currentTime + 0.5);\n  }\n\n  stop() {}\n\n}\n\nconst synthesizer = new Synthesizer();\nexport default synthesizer;","map":{"version":3,"sources":["C:/Internetanwendungen/fh06/src/Synthesizer.ts"],"names":["VOLUME","i","wnd","window","Notes","C","Cs","D","Ds","E","F","Fs","G","Gs","A","As","B","C2","Synthesizer","constructor","audioCtx","gainNode","createGain","connect","destination","gain","setValueAtTime","currentTime","exponentialRampToValueAtTime","getGainNode","value","switchType","toneType","volumePlus","volumeMinus","play","note","type","oscillator","createOscillator","frequency","start","stop","synthesizer"],"mappings":"AAAA;;;AAKA;AACA,IAAIA,MAAM,GAAG,GAAb;AACA,IAAIC,CAAC,GAAG,CAAR,C,CAEA;;AACA,MAAMC,GAAG,GAAGC,MAAZ;AAEA,OAAO,MAAMC,KAEZ,GAAG;AACFC,EAAAA,CAAC,EAAE,MADD;AAEFC,EAAAA,EAAE,EAAE,MAFF;AAGFC,EAAAA,CAAC,EAAE,MAHD;AAIFC,EAAAA,EAAE,EAAE,MAJF;AAKFC,EAAAA,CAAC,EAAE,MALD;AAMFC,EAAAA,CAAC,EAAE,MAND;AAOFC,EAAAA,EAAE,EAAE,MAPF;AAQFC,EAAAA,CAAC,EAAE,GARD;AASFC,EAAAA,EAAE,EAAE,MATF;AAUFC,EAAAA,CAAC,EAAE,GAVD;AAWFC,EAAAA,EAAE,EAAE,MAXF;AAYFC,EAAAA,CAAC,EAAE,MAZD;AAaFC,EAAAA,EAAE,EAAE,SAAS;AAbX,CAFG;;AAkBP,MAAMC,WAAN,CAAkB;AAMhBC,EAAAA,WAAW,GAAG;AAAA,SAJNC,QAIM,GAJmB,KAAKlB,GAAG,CAAC,cAAD,CAAH,IAAuBA,GAAG,CAAC,oBAAD,CAA/B,GAInB;AAAA,SAHNmB,QAGM;AAEZ,SAAKA,QAAL,GAAgB,KAAKD,QAAL,CAAcE,UAAd,EAAhB,CAFY,CAGZ;;AACA,SAAKD,QAAL,CAAcE,OAAd,CAAsB,KAAKH,QAAL,CAAcI,WAApC,EAJY,CAKZ;AACA;;AACA,SAAKH,QAAL,CAAcI,IAAd,CAAmBC,cAAnB,CAAkC,CAAlC,EAAqC,KAAKN,QAAL,CAAcO,WAAd,GAA4B,IAAjE;AACA,SAAKN,QAAL,CAAcI,IAAd,CAAmBG,4BAAnB,CAAgD,GAAhD,EAAqD,KAAKR,QAAL,CAAcO,WAAd,GAA4B,GAAjF;AAED;;AACME,EAAAA,WAAP,GAAoB;AAClB,WAAQ,KAAKR,QAAL,CAAcI,IAAd,CAAmBK,KAA3B;AACD;;AACMC,EAAAA,UAAP,CAAmBC,QAAnB,EAAoC;AAElC,QAAI/B,CAAC,GAAC,CAAN,EAAQ;AACNA,MAAAA,CAAC;AACH,aAAQ,MAAR;AAAiB,KAFjB,MAGK;AACH,aAAQ+B,QAAR;AACD;AACF;;AACMC,EAAAA,UAAP,GAAqB;AACnB;;;;;;;AAOD;;AACMC,EAAAA,WAAP,GAAsB;AACpB;;;;;;AAMD;;AACMC,EAAAA,IAAP,CAAYC,IAAZ,EAA0BC,IAA1B,EAAqC;AAEnC,UAAMC,UAAU,GAAG,KAAKlB,QAAL,CAAcmB,gBAAd,EAAnB;AACAD,IAAAA,UAAU,CAACf,OAAX,CAAmB,KAAKF,QAAxB,EAHmC,CAKnC;;AACAiB,IAAAA,UAAU,CAACD,IAAX,GAAkBA,IAAlB;AACAC,IAAAA,UAAU,CAACE,SAAX,CAAqBV,KAArB,GAA6BM,IAA7B;AAEAE,IAAAA,UAAU,CAACG,KAAX,CAAiB,KAAKrB,QAAL,CAAcO,WAA/B;AACAW,IAAAA,UAAU,CAACE,SAAX,CAAqBd,cAArB,CAAoC,GAApC,EAAyC,KAAKN,QAAL,CAAcO,WAAvD,EAVmC,CAWnC;;AACAW,IAAAA,UAAU,CAACI,IAAX,CAAgB,KAAKtB,QAAL,CAAcO,WAAd,GAA4B,GAA5C;AACD;;AAEMe,EAAAA,IAAP,GAAc,CAEb;;AA/De;;AAmElB,MAAMC,WAAW,GAAG,IAAIzB,WAAJ,EAApB;AACA,eAAeyB,WAAf","sourcesContent":["/*\nhttps://pages.mtu.edu/~suits/notefreqs.html\n*/\n\n\n// 1 = loud\nvar VOLUME = 0.3;\nvar i = 0;\n\n// work around typescript warnings\nconst wnd = window as any;\n\nexport const Notes: {\n  [key: string]: number\n} = {\n  C: 261.63,\n  Cs: 277.18,\n  D: 293.66,\n  Ds: 311.13,\n  E: 329.63,\n  F: 349.23,\n  Fs: 369.99,\n  G: 392,\n  Gs: 415.30,\n  A: 440,\n  As: 466.16,\n  B: 493.88,\n  C2: 261.63 * 2\n};\n\nclass Synthesizer {\n\n  private audioCtx: AudioContext = new (wnd['AudioContext'] || wnd['webkitAudioContext'])();\n  private gainNode: GainNode;\n\n\n  constructor() {\n\n    this.gainNode = this.audioCtx.createGain();\n    // connect to audio context\n    this.gainNode.connect(this.audioCtx.destination);\n    // lower volume\n    //this.gainNode.gain.value = VOLUME;\n    this.gainNode.gain.setValueAtTime(0, this.audioCtx.currentTime + 0.01);\n    this.gainNode.gain.exponentialRampToValueAtTime(0.1, this.audioCtx.currentTime + 0.5);\n\n  }\n  public getGainNode(){\n    return (this.gainNode.gain.value);\n  }\n  public switchType (toneType: string){\n\n    if (i=0){\n      i++;\n    return ('sine');}\n    else {\n      return (toneType);\n    }\n  }\n  public volumePlus () {\n    /*if(this.gainNode.gain.value<0.70){\n    this.gainNode.gain.value = this.gainNode.gain.value + 0.01;}\n    else{\n      alert(\"max erreicht\");\n      this.gainNode.gain.value = 0.70;\n    }\n    console.log(this.gainNode.gain.value);*/\n  }\n  public volumeMinus () {\n    /*if(this.gainNode.gain.value>0.01){\n    this.gainNode.gain.value = this.gainNode.gain.value - 0.01;}\n    else{\n      this.gainNode.gain.value=0;\n    }\n    console.log(this.gainNode.gain.value);*/\n  }\n  public play(note: number, type: any) {\n\n    const oscillator = this.audioCtx.createOscillator();\n    oscillator.connect(this.gainNode);\n\n    // default\n    oscillator.type = type;\n    oscillator.frequency.value = note;\n\n    oscillator.start(this.audioCtx.currentTime);\n    oscillator.frequency.setValueAtTime(0.3, this.audioCtx.currentTime );\n    //oscillator.frequency.exponentialRampToValueAtTime(0.01,this.audioCtx.currentTime + 0.5 );\n    oscillator.stop(this.audioCtx.currentTime + 0.5);\n  }\n\n  public stop() {\n\n  }\n\n}\n\nconst synthesizer = new Synthesizer();\nexport default synthesizer;"]},"metadata":{},"sourceType":"module"}