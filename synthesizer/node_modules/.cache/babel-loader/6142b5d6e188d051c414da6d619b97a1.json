{"ast":null,"code":"/*\nhttps://pages.mtu.edu/~suits/notefreqs.html\n*/\n// 1 = loud\nvar VOLUME = 0.3;\nvar octavmtpl = 1; // work around typescript warnings\n\nconst wnd = window;\nexport const Notes = {\n  C: 261.63,\n  Cis: 277.18,\n  D: 293.66,\n  Dis: 311.13,\n  E: 329.63,\n  F: 349.23,\n  Fis: 369.99,\n  G: 392,\n  Gis: 415.30,\n  A: 440,\n  Ais: 466.16,\n  B: 493.88,\n  C2: 261.63 * 2\n};\n\nclass Synthesizer {\n  constructor() {\n    this.audioCtx = new (wnd['AudioContext'] || wnd['webkitAudioContext'])();\n    this.gainNode = void 0;\n    this.gain = [GainNode, GainNode, GainNode];\n    this.gainNode = this.audioCtx.createGain(); // connect to audio context\n\n    this.gainNode.connect(this.audioCtx.destination); // lower volume\n    //this.gainNode.gain.value = VOLUME;\n    //this.gainNode.gain.setValueAtTime(0.3, this.audioCtx.currentTime);\n    //this.gainNode.gain.exponentialRampToValueAtTime(0.1, this.audioCtx.currentTime + 0.5);\n  }\n\n  getGainNode() {\n    var volume = VOLUME;\n    return volume;\n  }\n\n  setOctavmtpl(a) {\n    octavmtpl = a;\n    console.log(octavmtpl);\n  }\n\n  volumePlus() {\n    if (VOLUME < 1) {\n      VOLUME = VOLUME + 0.01;\n    } else {\n      VOLUME = 1;\n    }\n\n    this.gainNode.gain.value = VOLUME / 6;\n    console.log(\"Vol: \" + VOLUME, \"Gain: \" + this.gainNode.gain.value);\n  }\n\n  volumeMinus() {\n    if (VOLUME > 0.01) {\n      VOLUME = VOLUME - 0.01;\n    } else {\n      VOLUME = 0;\n    }\n\n    this.gainNode.gain.value = VOLUME / 6;\n    console.log(this.gainNode.gain.value);\n  }\n\n  play(note, type, i) {\n    const oscillator = this.audioCtx.createOscillator();\n    const Osci = [this.audioCtx.createOscillator(), this.audioCtx.createOscillator(), this.audioCtx.createOscillator()];\n    Osci[i].connect(this.gainNode);\n    oscillator.connect(this.gainNode); // default\n\n    Osci[i].type = type;\n    Osci[i].frequency.value = note;\n    oscillator.type = type;\n    oscillator.frequency.value = note * octavmtpl;\n    this.gainNode.gain.setValueAtTime(VOLUME / 6, this.audioCtx.currentTime); //this.gainNode.gain.exponentialRampToValueAtTime(VOLUME, this.audioCtx.currentTime +0.5);\n    //this.gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioCtx.currentTime+0.5);\n\n    this.gainNode.gain.linearRampToValueAtTime(0.0, this.audioCtx.currentTime + 0.2); //this.gainNode.gain.setValueAtTime(0, this.audioCtx.currentTime + 1);\n    //oscillator.frequency.setValueAtTime(1, this.audioCtx.currentTime + 2 );\n    //oscillator.frequency.setValueAtTime(0, this.audioCtx.currentTime + 2 );\n\n    oscillator.frequency.exponentialRampToValueAtTime(note, this.audioCtx.currentTime + 0.2);\n    oscillator.start();\n    oscillator.stop(this.audioCtx.currentTime + 0.2);\n    /*Osci[i].start();\n    Osci[i].stop(this.audioCtx.currentTime +2);*/\n\n    console.log(i);\n  }\n\n}\n\nconst synthesizer = new Synthesizer();\nexport default synthesizer;","map":{"version":3,"sources":["C:/Internetanwendungen/fh06/src/Synthesizer.ts"],"names":["VOLUME","octavmtpl","wnd","window","Notes","C","Cis","D","Dis","E","F","Fis","G","Gis","A","Ais","B","C2","Synthesizer","constructor","audioCtx","gainNode","gain","GainNode","createGain","connect","destination","getGainNode","volume","setOctavmtpl","a","console","log","volumePlus","value","volumeMinus","play","note","type","i","oscillator","createOscillator","Osci","frequency","setValueAtTime","currentTime","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop","synthesizer"],"mappings":"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","sourcesContent":["/*\nhttps://pages.mtu.edu/~suits/notefreqs.html\n*/\n\n\n// 1 = loud\nvar VOLUME = 0.3;\n\nvar octavmtpl = 1;\n\n\n// work around typescript warnings\nconst wnd = window as any;\n\nexport const Notes: {\n  [key: string]: number\n} = {\n  C: 261.63,\n  Cis: 277.18,\n  D: 293.66,\n  Dis: 311.13,\n  E: 329.63,\n  F: 349.23,\n  Fis: 369.99,\n  G: 392,\n  Gis: 415.30,\n  A: 440,\n  Ais: 466.16,\n  B: 493.88,\n  C2: 261.63 * 2\n};\n\nclass Synthesizer {\n\n  private audioCtx: AudioContext = new (wnd['AudioContext'] || wnd['webkitAudioContext'])();\n  private gainNode : GainNode;\n  private gain = [GainNode, GainNode, GainNode];\n\n\n\n  constructor() {\n\n    this.gainNode= this.audioCtx.createGain();\n    // connect to audio context\n    this.gainNode.connect(this.audioCtx.destination);\n\n    // lower volume\n    //this.gainNode.gain.value = VOLUME;\n    //this.gainNode.gain.setValueAtTime(0.3, this.audioCtx.currentTime);\n\n    //this.gainNode.gain.exponentialRampToValueAtTime(0.1, this.audioCtx.currentTime + 0.5);\n\n  }\n  public getGainNode(){\n    var volume = VOLUME;\n    return volume;\n  }\n  public setOctavmtpl(a: number){\n    octavmtpl = a;\n    console.log(octavmtpl)\n  }\n\n  public volumePlus () {\n    if(VOLUME<1){\n    VOLUME = VOLUME + 0.01;}\n    else{\n      VOLUME = 1;\n    }\n    this.gainNode.gain.value=VOLUME/6;\n    console.log(\"Vol: \"+VOLUME ,\"Gain: \"+this.gainNode.gain.value);\n  }\n  public volumeMinus () {\n    if(VOLUME>0.01){\n    VOLUME = VOLUME - 0.01;}\n    else{\n      VOLUME=0;\n    }\n    this.gainNode.gain.value=VOLUME/6;\n    console.log(this.gainNode.gain.value);\n  }\n\n  public play(note: number, type: any, i: number) {\n    const oscillator = this.audioCtx.createOscillator();\n    const Osci = [this.audioCtx.createOscillator(),this.audioCtx.createOscillator(),this.audioCtx.createOscillator()];\n\n    Osci[i].connect(this.gainNode);\n\n    oscillator.connect(this.gainNode);\n\n    // default\n    Osci[i].type = type;\n    Osci[i].frequency.value = note;\n    oscillator.type = type;\n    oscillator.frequency.value = note*octavmtpl;\n\n\n    this.gainNode.gain.setValueAtTime(VOLUME/6, this.audioCtx.currentTime );\n    //this.gainNode.gain.exponentialRampToValueAtTime(VOLUME, this.audioCtx.currentTime +0.5);\n    //this.gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioCtx.currentTime+0.5);\n    this.gainNode.gain.linearRampToValueAtTime(0.0, this.audioCtx.currentTime+0.2);\n    //this.gainNode.gain.setValueAtTime(0, this.audioCtx.currentTime + 1);\n    //oscillator.frequency.setValueAtTime(1, this.audioCtx.currentTime + 2 );\n    //oscillator.frequency.setValueAtTime(0, this.audioCtx.currentTime + 2 );\n    oscillator.frequency.exponentialRampToValueAtTime(note,this.audioCtx.currentTime + 0.2 );\n    oscillator.start();\n    oscillator.stop(this.audioCtx.currentTime + 0.2 );\n    /*Osci[i].start();\n    Osci[i].stop(this.audioCtx.currentTime +2);*/\n    console.log(i);\n\n  }\n\n\n\n}\n\nconst synthesizer = new Synthesizer();\nexport default synthesizer;"]},"metadata":{},"sourceType":"module"}