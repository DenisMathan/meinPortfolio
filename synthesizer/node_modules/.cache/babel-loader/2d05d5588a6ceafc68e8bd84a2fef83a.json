{"ast":null,"code":"/*\nhttps://pages.mtu.edu/~suits/notefreqs.html\n*/\n// 1 = loud\nvar VOLUME = 0.3;\nvar i = 0; // work around typescript warnings\n\nconst wnd = window;\nexport const Notes = {\n  C: 261.63,\n  Cs: 277.18,\n  D: 293.66,\n  Ds: 311.13,\n  E: 329.63,\n  F: 349.23,\n  Fs: 369.99,\n  G: 392,\n  Gs: 415.30,\n  A: 440,\n  As: 466.16,\n  B: 493.88,\n  C2: 261.63 * 2\n};\n\nclass Synthesizer {\n  constructor() {\n    this.audioCtx = new (wnd['AudioContext'] || wnd['webkitAudioContext'])();\n    this.gainNode = void 0;\n    this.gainNode = this.audioCtx.createGain(); // connect to audio context\n\n    this.gainNode.connect(this.audioCtx.destination); // lower volume\n    //this.gainNode.gain.value = VOLUME;\n    //this.gainNode.gain.setValueAtTime(0.3, this.audioCtx.currentTime);\n    //this.gainNode.gain.exponentialRampToValueAtTime(0.1, this.audioCtx.currentTime + 0.5);\n  }\n\n  getGainNode() {\n    var volume = VOLUME;\n    return volume;\n  }\n\n  volumePlus() {\n    if (VOLUME < 1) {\n      VOLUME = VOLUME + 0.01;\n    } else {\n      VOLUME = 1;\n    }\n\n    this.gainNode.gain.value = VOLUME / 6;\n    console.log(\"Vol: \" + VOLUME, \"Gain: \" + this.gainNode.gain.value);\n  }\n\n  volumeMinus() {\n    if (VOLUME > 0.01) {\n      VOLUME = VOLUME - 0.01;\n    } else {\n      VOLUME = 0;\n    }\n\n    this.gainNode.gain.value = VOLUME / 6;\n    console.log(this.gainNode.gain.value);\n  }\n\n  play(note, type) {\n    if (i > 1) {\n      i++;\n    } else {\n      i = 0;\n    }\n\n    const oscillator = this.audioCtx.createOscillator();\n    const Osci = [this.audioCtx.createOscillator(), this.audioCtx.createOscillator()];\n    Osci[i].connect(this.gainNode);\n    oscillator.connect(this.gainNode); // default\n\n    Osci[i].type = type;\n    Osci[i].frequency.value = note;\n    oscillator.type = type;\n    oscillator.frequency.value = note;\n    this.gainNode.gain.setValueAtTime(VOLUME / 6, this.audioCtx.currentTime); //this.gainNode.gain.exponentialRampToValueAtTime(VOLUME, this.audioCtx.currentTime +0.5);\n    //this.gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioCtx.currentTime+0.5);\n\n    this.gainNode.gain.linearRampToValueAtTime(0.0, this.audioCtx.currentTime + 0.3); //this.gainNode.gain.setValueAtTime(0, this.audioCtx.currentTime + 1);\n    //oscillator.frequency.setValueAtTime(1, this.audioCtx.currentTime + 2 );\n    //oscillator.frequency.setValueAtTime(0, this.audioCtx.currentTime + 2 );\n\n    /*oscillator.frequency.exponentialRampToValueAtTime(note,this.audioCtx.currentTime + 0.3 );\n    oscillator.start();\n    oscillator.stop(this.audioCtx.currentTime + 0.3 );*/\n\n    Osci[i].start();\n    Osci[i].stop(this.audioCtx.currentTime + 0.3);\n    console.log(i);\n  }\n\n  stop() {}\n\n}\n\nconst synthesizer = new Synthesizer();\nexport default synthesizer;","map":{"version":3,"sources":["C:/Internetanwendungen/fh06/src/Synthesizer.ts"],"names":["VOLUME","i","wnd","window","Notes","C","Cs","D","Ds","E","F","Fs","G","Gs","A","As","B","C2","Synthesizer","constructor","audioCtx","gainNode","createGain","connect","destination","getGainNode","volume","volumePlus","gain","value","console","log","volumeMinus","play","note","type","oscillator","createOscillator","Osci","frequency","setValueAtTime","currentTime","linearRampToValueAtTime","start","stop","synthesizer"],"mappings":"AAAA;;;AAKA;AACA,IAAIA,MAAM,GAAG,GAAb;AACA,IAAIC,CAAC,GAAG,CAAR,C,CAIA;;AACA,MAAMC,GAAG,GAAGC,MAAZ;AAEA,OAAO,MAAMC,KAEZ,GAAG;AACFC,EAAAA,CAAC,EAAE,MADD;AAEFC,EAAAA,EAAE,EAAE,MAFF;AAGFC,EAAAA,CAAC,EAAE,MAHD;AAIFC,EAAAA,EAAE,EAAE,MAJF;AAKFC,EAAAA,CAAC,EAAE,MALD;AAMFC,EAAAA,CAAC,EAAE,MAND;AAOFC,EAAAA,EAAE,EAAE,MAPF;AAQFC,EAAAA,CAAC,EAAE,GARD;AASFC,EAAAA,EAAE,EAAE,MATF;AAUFC,EAAAA,CAAC,EAAE,GAVD;AAWFC,EAAAA,EAAE,EAAE,MAXF;AAYFC,EAAAA,CAAC,EAAE,MAZD;AAaFC,EAAAA,EAAE,EAAE,SAAS;AAbX,CAFG;;AAkBP,MAAMC,WAAN,CAAkB;AAOhBC,EAAAA,WAAW,GAAG;AAAA,SALNC,QAKM,GALmB,KAAKlB,GAAG,CAAC,cAAD,CAAH,IAAuBA,GAAG,CAAC,oBAAD,CAA/B,GAKnB;AAAA,SAJNmB,QAIM;AAEZ,SAAKA,QAAL,GAAgB,KAAKD,QAAL,CAAcE,UAAd,EAAhB,CAFY,CAGZ;;AACA,SAAKD,QAAL,CAAcE,OAAd,CAAsB,KAAKH,QAAL,CAAcI,WAApC,EAJY,CAKZ;AACA;AACA;AAEA;AAED;;AACMC,EAAAA,WAAP,GAAoB;AAClB,QAAIC,MAAM,GAAG1B,MAAb;AACA,WAAO0B,MAAP;AACD;;AAEMC,EAAAA,UAAP,GAAqB;AACnB,QAAG3B,MAAM,GAAC,CAAV,EAAY;AACZA,MAAAA,MAAM,GAAGA,MAAM,GAAG,IAAlB;AAAwB,KADxB,MAEI;AACFA,MAAAA,MAAM,GAAG,CAAT;AACD;;AACD,SAAKqB,QAAL,CAAcO,IAAd,CAAmBC,KAAnB,GAAyB7B,MAAM,GAAC,CAAhC;AACA8B,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAQ/B,MAApB,EAA4B,WAAS,KAAKqB,QAAL,CAAcO,IAAd,CAAmBC,KAAxD;AACD;;AACMG,EAAAA,WAAP,GAAsB;AACpB,QAAGhC,MAAM,GAAC,IAAV,EAAe;AACfA,MAAAA,MAAM,GAAGA,MAAM,GAAG,IAAlB;AAAwB,KADxB,MAEI;AACFA,MAAAA,MAAM,GAAC,CAAP;AACD;;AACD,SAAKqB,QAAL,CAAcO,IAAd,CAAmBC,KAAnB,GAAyB7B,MAAM,GAAC,CAAhC;AACA8B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,QAAL,CAAcO,IAAd,CAAmBC,KAA/B;AACD;;AAEMI,EAAAA,IAAP,CAAYC,IAAZ,EAA0BC,IAA1B,EAAqC;AACnC,QAAGlC,CAAC,GAAC,CAAL,EAAO;AAACA,MAAAA,CAAC;AAAI,KAAb,MACI;AAACA,MAAAA,CAAC,GAAC,CAAF;AAAK;;AACV,UAAMmC,UAAU,GAAG,KAAKhB,QAAL,CAAciB,gBAAd,EAAnB;AACA,UAAMC,IAAI,GAAG,CAAC,KAAKlB,QAAL,CAAciB,gBAAd,EAAD,EAAkC,KAAKjB,QAAL,CAAciB,gBAAd,EAAlC,CAAb;AACAC,IAAAA,IAAI,CAACrC,CAAD,CAAJ,CAAQsB,OAAR,CAAgB,KAAKF,QAArB;AAEAe,IAAAA,UAAU,CAACb,OAAX,CAAmB,KAAKF,QAAxB,EAPmC,CASnC;;AACAiB,IAAAA,IAAI,CAACrC,CAAD,CAAJ,CAAQkC,IAAR,GAAeA,IAAf;AACAG,IAAAA,IAAI,CAACrC,CAAD,CAAJ,CAAQsC,SAAR,CAAkBV,KAAlB,GAA0BK,IAA1B;AACAE,IAAAA,UAAU,CAACD,IAAX,GAAkBA,IAAlB;AACAC,IAAAA,UAAU,CAACG,SAAX,CAAqBV,KAArB,GAA6BK,IAA7B;AAGA,SAAKb,QAAL,CAAcO,IAAd,CAAmBY,cAAnB,CAAkCxC,MAAM,GAAC,CAAzC,EAA4C,KAAKoB,QAAL,CAAcqB,WAA1D,EAhBmC,CAiBnC;AACA;;AACA,SAAKpB,QAAL,CAAcO,IAAd,CAAmBc,uBAAnB,CAA2C,GAA3C,EAAgD,KAAKtB,QAAL,CAAcqB,WAAd,GAA0B,GAA1E,EAnBmC,CAoBnC;AACA;AACA;;AACA;;;;AAGAH,IAAAA,IAAI,CAACrC,CAAD,CAAJ,CAAQ0C,KAAR;AACAL,IAAAA,IAAI,CAACrC,CAAD,CAAJ,CAAQ2C,IAAR,CAAa,KAAKxB,QAAL,CAAcqB,WAAd,GAA4B,GAAzC;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY9B,CAAZ;AAED;;AAEM2C,EAAAA,IAAP,GAAc,CAEb;;AA7Ee;;AAiFlB,MAAMC,WAAW,GAAG,IAAI3B,WAAJ,EAApB;AACA,eAAe2B,WAAf","sourcesContent":["/*\nhttps://pages.mtu.edu/~suits/notefreqs.html\n*/\n\n\n// 1 = loud\nvar VOLUME = 0.3;\nvar i = 0;\n\n\n\n// work around typescript warnings\nconst wnd = window as any;\n\nexport const Notes: {\n  [key: string]: number\n} = {\n  C: 261.63,\n  Cs: 277.18,\n  D: 293.66,\n  Ds: 311.13,\n  E: 329.63,\n  F: 349.23,\n  Fs: 369.99,\n  G: 392,\n  Gs: 415.30,\n  A: 440,\n  As: 466.16,\n  B: 493.88,\n  C2: 261.63 * 2\n};\n\nclass Synthesizer {\n\n  private audioCtx: AudioContext = new (wnd['AudioContext'] || wnd['webkitAudioContext'])();\n  private gainNode: GainNode;\n\n\n\n  constructor() {\n\n    this.gainNode = this.audioCtx.createGain();\n    // connect to audio context\n    this.gainNode.connect(this.audioCtx.destination);\n    // lower volume\n    //this.gainNode.gain.value = VOLUME;\n    //this.gainNode.gain.setValueAtTime(0.3, this.audioCtx.currentTime);\n\n    //this.gainNode.gain.exponentialRampToValueAtTime(0.1, this.audioCtx.currentTime + 0.5);\n\n  }\n  public getGainNode(){\n    var volume = VOLUME;\n    return volume;\n  }\n\n  public volumePlus () {\n    if(VOLUME<1){\n    VOLUME = VOLUME + 0.01;}\n    else{\n      VOLUME = 1;\n    }\n    this.gainNode.gain.value=VOLUME/6;\n    console.log(\"Vol: \"+VOLUME ,\"Gain: \"+this.gainNode.gain.value);\n  }\n  public volumeMinus () {\n    if(VOLUME>0.01){\n    VOLUME = VOLUME - 0.01;}\n    else{\n      VOLUME=0;\n    }\n    this.gainNode.gain.value=VOLUME/6;\n    console.log(this.gainNode.gain.value);\n  }\n\n  public play(note: number, type: any) {\n    if(i>1){i++;}\n    else{i=0;}\n    const oscillator = this.audioCtx.createOscillator();\n    const Osci = [this.audioCtx.createOscillator(),this.audioCtx.createOscillator()];\n    Osci[i].connect(this.gainNode);\n\n    oscillator.connect(this.gainNode);\n\n    // default\n    Osci[i].type = type;\n    Osci[i].frequency.value = note;\n    oscillator.type = type;\n    oscillator.frequency.value = note;\n\n\n    this.gainNode.gain.setValueAtTime(VOLUME/6, this.audioCtx.currentTime );\n    //this.gainNode.gain.exponentialRampToValueAtTime(VOLUME, this.audioCtx.currentTime +0.5);\n    //this.gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioCtx.currentTime+0.5);\n    this.gainNode.gain.linearRampToValueAtTime(0.0, this.audioCtx.currentTime+0.3);\n    //this.gainNode.gain.setValueAtTime(0, this.audioCtx.currentTime + 1);\n    //oscillator.frequency.setValueAtTime(1, this.audioCtx.currentTime + 2 );\n    //oscillator.frequency.setValueAtTime(0, this.audioCtx.currentTime + 2 );\n    /*oscillator.frequency.exponentialRampToValueAtTime(note,this.audioCtx.currentTime + 0.3 );\n    oscillator.start();\n    oscillator.stop(this.audioCtx.currentTime + 0.3 );*/\n    Osci[i].start();\n    Osci[i].stop(this.audioCtx.currentTime + 0.3);\n    console.log(i);\n\n  }\n\n  public stop() {\n\n  }\n\n}\n\nconst synthesizer = new Synthesizer();\nexport default synthesizer;"]},"metadata":{},"sourceType":"module"}